version: '3.8'

# Staging environment Docker Compose configuration
# Deployed to pw.kevinalthaus.com for comprehensive testing

services:
  postgres-staging:
    image: postgres:15-alpine
    container_name: keystone-postgres-staging
    restart: unless-stopped
    environment:
      POSTGRES_DB: keystone_staging
      POSTGRES_USER: keystone_staging
      POSTGRES_PASSWORD: ${STAGING_DB_PASSWORD:-staging_secure_pass_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    volumes:
      - staging_postgres_data:/var/lib/postgresql/data
      - ./packages/backend/migrations:/docker-entrypoint-initdb.d:ro
    ports:
      - "5433:5432"
    networks:
      - staging
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keystone_staging -d keystone_staging"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  redis-staging:
    image: redis:7-alpine
    container_name: keystone-redis-staging
    restart: unless-stopped
    command: redis-server --maxmemory 128mb --maxmemory-policy allkeys-lru
    ports:
      - "6380:6379"
    networks:
      - staging
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  backend-staging:
    image: ghcr.io/${GITHUB_REPOSITORY}/backend:staging
    container_name: keystone-backend-staging
    restart: unless-stopped
    environment:
      NODE_ENV: staging
      PORT: 3000
      DB_HOST: postgres-staging
      DB_PORT: 5432
      DB_NAME: keystone_staging
      DB_USER: keystone_staging
      DB_PASSWORD: ${STAGING_DB_PASSWORD:-staging_secure_pass_2024}
      REDIS_HOST: redis-staging
      REDIS_PORT: 6379
      JWT_SECRET: ${STAGING_JWT_SECRET:-staging_jwt_secret_change_me_2024}
      JWT_EXPIRES_IN: 15m
      REFRESH_TOKEN_EXPIRES_IN: 7d
      CORS_ORIGIN: https://pw.kevinalthaus.com
      API_RATE_LIMIT: 100
      ENABLE_SWAGGER: true
      LOG_LEVEL: debug
      SENTRY_DSN: ${STAGING_SENTRY_DSN}
    depends_on:
      postgres-staging:
        condition: service_healthy
      redis-staging:
        condition: service_healthy
    ports:
      - "4000:3000"
    networks:
      - staging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '1'
          memory: 512M

  backend-ui-staging:
    image: ghcr.io/${GITHUB_REPOSITORY}/backend-ui:staging
    container_name: keystone-backend-ui-staging
    restart: unless-stopped
    environment:
      NODE_ENV: production
    ports:
      - "4174:80"
    networks:
      - staging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Test data seeder service
  test-seeder:
    build:
      context: ./tests
      dockerfile: Dockerfile.seeder
    container_name: keystone-test-seeder
    environment:
      DB_HOST: postgres-staging
      DB_PORT: 5432
      DB_NAME: keystone_staging
      DB_USER: keystone_staging
      DB_PASSWORD: ${STAGING_DB_PASSWORD:-staging_secure_pass_2024}
      API_URL: http://backend-staging:3000
    depends_on:
      postgres-staging:
        condition: service_healthy
      backend-staging:
        condition: service_healthy
    networks:
      - staging
    profiles:
      - seed

  # Playwright test runner
  playwright-runner:
    image: mcr.microsoft.com/playwright:v1.40.0-jammy
    container_name: keystone-playwright-staging
    environment:
      PLAYWRIGHT_BASE_URL: https://pw.kevinalthaus.com
      CI: true
      NODE_ENV: test
    volumes:
      - ./tests:/tests
      - ./playwright.config.ts:/tests/playwright.config.ts:ro
      - ./test-results:/test-results
      - ./playwright-report:/playwright-report
    working_dir: /tests
    command: ["npx", "playwright", "test"]
    networks:
      - staging
    profiles:
      - test

  # Monitoring for staging
  prometheus-staging:
    image: prom/prometheus:latest
    container_name: keystone-prometheus-staging
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus/prometheus.staging.yml:/etc/prometheus/prometheus.yml:ro
      - staging_prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9091:9090"
    networks:
      - staging
    profiles:
      - monitoring

  grafana-staging:
    image: grafana/grafana:latest
    container_name: keystone-grafana-staging
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${STAGING_GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${STAGING_GRAFANA_PASSWORD:-staging_admin_2024}
      GF_SERVER_ROOT_URL: https://pw.kevinalthaus.com/grafana
      GF_SERVER_SERVE_FROM_SUB_PATH: true
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - staging_grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3002:3000"
    networks:
      - staging
    profiles:
      - monitoring

networks:
  staging:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  staging_postgres_data:
    driver: local
  staging_prometheus_data:
    driver: local
  staging_grafana_data:
    driver: local