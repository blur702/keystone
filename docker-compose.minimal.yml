services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: keystone-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: keystone
      POSTGRES_USER: keystone
      POSTGRES_PASSWORD: ${DB_PASSWORD:-keystone}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/backend/migrations:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - keystone-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keystone"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./packages/backend
      dockerfile: Dockerfile
    container_name: keystone-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: keystone
      DB_USER: keystone
      DB_PASSWORD: ${DB_PASSWORD:-keystone}
      JWT_SECRET: ${JWT_SECRET:-change-this-secret-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-15m}
      REFRESH_TOKEN_EXPIRES_IN: ${REFRESH_TOKEN_EXPIRES_IN:-7d}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-10}
      SESSION_TIMEOUT: ${SESSION_TIMEOUT:-86400000}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost}
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "3000:3000"
    networks:
      - keystone-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend UI
  backend-ui:
    build:
      context: ./packages/backend-ui
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost/api}
    container_name: keystone-backend-ui
    restart: unless-stopped
    ports:
      - "5174:80"
    networks:
      - keystone-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: keystone-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - backend-ui
    networks:
      - keystone-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  keystone-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local