version: '3.9'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: keystone-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - backend-ui
    networks:
      - keystone-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Service
  backend:
    build:
      context: ./packages/backend
      dockerfile: Dockerfile
    container_name: keystone-backend
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-keystone}
      DB_USER: ${DB_USER:-keystone}
      DB_PASSWORD: ${DB_PASSWORD:-keystone}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis}
      JWT_SECRET: ${JWT_SECRET:-change-this-secret}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-15m}
      REFRESH_TOKEN_EXPIRES_IN: ${REFRESH_TOKEN_EXPIRES_IN:-7d}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-10}
      SESSION_TIMEOUT: ${SESSION_TIMEOUT:-86400000}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost}
      BREVO_API_KEY: ${BREVO_API_KEY}
      BREVO_WEBHOOK_SECRET: ${BREVO_WEBHOOK_SECRET}
      DEFAULT_FROM_EMAIL: ${DEFAULT_FROM_EMAIL:-noreply@keystone.local}
      DEFAULT_FROM_NAME: ${DEFAULT_FROM_NAME:-Keystone Platform}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-change-this-encryption-key}
    volumes:
      - ./packages/backend/migrations:/app/migrations:ro
      - ./packages/backend/plugins:/app/plugins
      - uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - keystone-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3


  # Backend UI Service
  backend-ui:
    build:
      context: ./packages/backend-ui
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost/api}
    container_name: keystone-backend-ui
    networks:
      - keystone-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Python Services (placeholder for future)
  python-services:
    image: python:3.11-slim
    container_name: keystone-python
    command: ["python", "-m", "http.server", "8000"]
    ports:
      - "8000:8000"
    environment:
      PYTHONUNBUFFERED: 1
      DATABASE_URL: postgresql://${DB_USER:-keystone}:${DB_PASSWORD:-keystone}@postgres:5432/${DB_NAME:-keystone}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis}@redis:6379
    volumes:
      - ./packages/python-services:/app
      - python_cache:/root/.cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - keystone-network
    restart: unless-stopped

  # PostgreSQL with PostGIS
  postgres:
    image: postgis/postgis:15-3.3-alpine
    container_name: keystone-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER:-keystone}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-keystone}
      POSTGRES_DB: ${DB_NAME:-keystone}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/backend/migrations:/docker-entrypoint-initdb.d:ro
      - ./database/backups:/backups
    networks:
      - keystone-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-keystone} -d ${DB_NAME:-keystone}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: keystone-redis
    ports:
      - "6379:6379"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis}
    volumes:
      - redis_data:/data
    networks:
      - keystone-network
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis}
    healthcheck:
      test: ["CMD", "redis-cli", "--auth", "${REDIS_PASSWORD:-redis}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Database Backup Service
  db-backup:
    image: postgres:15-alpine
    container_name: keystone-db-backup
    environment:
      PGPASSWORD: ${DB_PASSWORD:-keystone}
    volumes:
      - ./database/backups:/backups
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - keystone-network
    restart: "no"
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "while true; do
        pg_dump -h postgres -U ${DB_USER:-keystone} -d ${DB_NAME:-keystone} > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
        find /backups -name 'backup_*.sql' -mtime +7 -delete
        sleep 86400
      done"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: keystone-prometheus
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - keystone-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: keystone-grafana
    ports:
      - "127.0.0.1:3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - keystone-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Loki Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: keystone-loki
    ports:
      - "127.0.0.1:3100:3100"
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - keystone-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Promtail Log Collector
  promtail:
    image: grafana/promtail:latest
    container_name: keystone-promtail
    volumes:
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - nginx_logs:/var/log/nginx:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - keystone-network
    restart: unless-stopped

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: keystone-node-exporter
    ports:
      - "127.0.0.1:9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - keystone-network
    restart: unless-stopped

  # PostgreSQL Exporter for Database Metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: keystone-postgres-exporter
    ports:
      - "127.0.0.1:9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?sslmode=disable"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - keystone-network
    restart: unless-stopped

  # Redis Exporter for Cache Metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: keystone-redis-exporter
    ports:
      - "127.0.0.1:9121:9121"
    environment:
      REDIS_ADDR: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - keystone-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  python_cache:
    driver: local
  uploads:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  keystone-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16